<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>socket.IO</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
      :root {
        --body-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        --msger-bg: #fff;
        --border: 2px solid #ddd;
        --left-msg-bg: #ececec;
        --right-msg-bg: #579ffb;
      }

      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-image: var(--body-bg);
        font-family: Helvetica, sans-serif;
        margin: 0; /* Remove default margin */
      }
      .notice {
        text-align: center;
      }
      .chat-box {
        display: flex;
        flex-flow: column;
        justify-content: space-between;
        width: 100%;
        max-width: 867px;
        margin: 25px 10px;
        height: calc(100% - 50px);
        border: var(--border);
        border-radius: 5px;
        background: var(--msger-bg);
        box-shadow: 0 15px 15px -5px rgba(0, 0, 0, 0.2);
      }

      .chat-list {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
        /* max-height: max-content; */
        overflow-y: scroll;
        min-height: calc(100vh - 10rem);
        border-radius: 15px;
        /* background: var(--left-msg-bg); */
      }

      .my-chat,
      .other-chat {
        max-width: 70%;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 5px;
        word-wrap: break-word;
      }

      .my-chat {
        align-self: flex-end;
        background-color: #4caf50;
        margin-top: 10px;
        margin-right: 20px;
        color: #fff;
        border-bottom-right-radius: 0;
      }

      .other-chat {
        margin-left: 20px;
        margin-bottom: 10px;
        align-self: flex-start;
        background-color: #ddd;
        border-top-left-radius: 0;
      }

      .msger-inputarea {
        /* position: fixed; */
        /* height: 10rem; */
        display: flex;
        padding: 10px;
        border-top: var(--border);
        background: #eee;
      }

      .msger-inputarea * {
        padding: 10px;
        border: none;
        border-radius: 3px;
        font-size: 1em;
      }

      .msger-input {
        flex: 1;
        background: #ddd;
      }

      .msger-send-btn {
        margin-left: 10px;
        background: rgb(0, 196, 65);
        color: #fff;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.23s;
      }

      .msger-send-btn:hover {
        background: rgb(0, 180, 50);
      }

      .d-none {
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>socket io</h1>

    <!-- [실습1] 각 버튼 누를 때 마다 서버로 메세지 보내기 -->
    <!-- <button onclick="sayHello()">Hello</button>
    <button onclick="sayStudy()">Study</button> -->
    <div class="entry-box">
      <input
        type="text"
        id="nickname"
        placeholder="닉네임"
        autofocus
        onkeypress="if(window.event.keyCode==13){join()}"
      />
      <button onclick="join()">입장</button>
    </div>
    <p id="form-server"></p>

    <!-- [실습2] 채팅 -->
    <main class="chat-box d-none">
      <div class="chat-list">
        <!-- 임시 데이터 -->
        <!-- <div class="my-chat">
          <div>user1 : msg1</div>
        </div>

        <div class="other-chat">
          <div>user2 : msg1</div>
        </div> -->
      </div>
      <!-- 메세지 전송 영역 -->
      <div class="msger-inputarea">
        <select id="nick-list"></select>
        <input
          type="text"
          class="msger-input"
          placeholder="Enter your message..."
          onkeypress="if(window.event.keyCode==13){send()}"
        />
        <button type="button" class="msger-send-btn" onclick="send();">
          Send
        </button>
      </div>
    </main>

    <script>
      let socket = io.connect(); // 소켓 사용을 위한 객체 생성
      let myNick; // 내 닉네임

      socket.on('connect', () => {
        console.log('클라이언트 연결 완료::', socket.id);
      });

      // [실습3] 채팅창 입장 안내 문구
      socket.on('notice', (data) => {
        console.log(data);
        document
          .querySelector('.chat-list')
          .insertAdjacentHTML('beforeend', `<p class="notice">${data}</p>`);
      });

      // [실습3-2] 채팅창 입장 문구 socket.id => nickname
      function join() {
        socket.emit('setNick', document.querySelector('#nickname').value);
      }
      // 닉네임 중복 alert 띄우기
      socket.on('err', (data) => {
        alert(data);
      });

      // 입장성공 : 닉네임 입력창 비활성화
      socket.on('entrySuccess', (nick) => {
        myNick = nick;
        document.querySelector('#nickname').disabled = true;
        document.querySelector('.entry-box > button').disabled = true; // 버튼 비활성화
        document.querySelector('.chat-box').classList.remove('d-none'); // 채팅창 보이기
      });

      // 유저 목록 업데이트(select box 의 option 태그 개수 변경)
      socket.on('updateNicks', (nickObjs) => {
        let options = `<option value="all">전체</option>`;

        // Todo : nickObjs 반복하여 option 태그 추가
        // option 태그의 value 속성 값은 socket.id, option 태그의 컨텐츠는 nick 값

        const nickList = Object.values(nickObjs).map(
          (value) => `<option value="${value}">${value}</option>`
        );
        options += nickList.join('');

        // for (let key in nickObjs) {
        //   options += `<option value= "${key}">${nickObjs[key]}</option>`;
        // }

        document.querySelector('#nick-list').innerHTML = options;
      });

      // [실습4] 채팅창 메세지 전송 step1
      // "send" 이벤트 전송 {닉네임, 입력창 내용}
      function send() {
        const message = document.querySelector('.msger-input').value;
        if (message.trim() !== '') {
          document.querySelector('.msger-input').value = '';
          socket.emit('sendMsg', { nick: myNick, msg: message });
        }
        setTimeout(() => {
          scrollToBottom();
        }, 500);
      }

      // newMessage 이벤트를 받아서 {닉네임, 입력창 내용}
      // 내가 보낸 메세지: 오른쪽
      // 다른 사람이 보낸 메세지: 왼쪽

      socket.on('newMessage', (data) => {
        if (data.nick === myNick) {
          document
            .querySelector('.chat-list')
            .insertAdjacentHTML(
              'beforeend',
              `<div class="my-chat"><div>${data.msg}</div></div>`
            );
        } else {
          document
            .querySelector('.chat-list')
            .insertAdjacentHTML(
              'beforeend',
              `<p>${data.nick}: </p>  <div class="other-chat"> <div> ${data.msg}</div></div>`
            );
        }
        setTimeout(() => {
          scrollToBottom();
        }, 500);
      });

      // // [실습1]
      // function sayHello(msg) {
      //   socket.emit('hello', { who: 'client', msg: 'hello' });
      // }
      // // 밖으로 뺀경우와 function 안으로 넣은경우, 실행되는 횟수가 상이해짐!! (성능)
      // socket.on('helloKr', (data) => {
      //   console.count(data);
      //   document.querySelector(
      //     '#form-server'
      //   ).textContent = `${data.who} :${data.msg}`;
      // });

      // function sayStudy(msg) {
      //   socket.emit('study', { who: 'chitty', msg: 'bye' });
      // }

      // socket.on('studyBye', (data) => {
      //   document.querySelector(
      //     '#form-server'
      //   ).textContent = `${data.who} :${data.msg}`;
      // });
      function scrollToBottom() {
        var element = document.querySelector('.chat-list'); // 콘텐츠 영역의 ID를 사용합니다.
        element.scrollTop = element.scrollHeight;
      }
    </script>
  </body>
</html>
