<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 연습!</title>
    <script
      src="https://code.jquery.com/jquery-3.7.0.js"
      integrity="sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM="
      crossorigin="anonymous"
    ></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>동적 폼 전송 연습하기</h1>
    <form name="register">
      <label for="name">이름</label>
      <input type="text" name="name" id="name" />
      <br />
      성별
      <input type="radio" name="gender" value="m" id="male" />
      <label for="male">남</label>

      <input type="radio" name="gender" value="f" id="female" />
      <label for="female">여</label>
      <br />
      <button type="button" onclick="ajaxGet()">Ajax Get 제출</button>
      <button type="button" onclick="ajaxPost()">Ajax Post 제출</button>
      <br />

      <button type="button" onclick="axiosGet()">axios Get 제출</button>
      <button type="button" onclick="axiosPost()">axios Post 제출</button>
      <br />

      <button type="button" onclick="fetchGet()">fetch Get 제출</button>
      <button type="button" onclick="fetchPost()">fetch Post 제출</button>
    </form>

    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>

    <hr />

    <h1>OPEN API 이용하여 고양이 사진 랜덤 돌리기!</h1>

    <button onclick="changeImg()">랜덤</button>
    <img
      src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png"
      alt="고양이"
      width="500"
      height="500"
    />

    <script>
      const img = document.querySelector('img');

      async function changeImg() {
        const res = await axios({
          method: 'get',
          url: 'https://api.thecatapi.com/v1/images/search',
        });
        const { data } = res;
        img.src = data[0].url; //img 태그의 src 속성을 open api 에서 받아온 랜덤 이미지 주소로 변경
      }

      const result = document.querySelector('.result');

      function ajaxGet() {
        console.log('ajaxGet 함수 호출~!');

        // 폼 선택
        const form = document.forms['register'];
        console.dir(form);
        console.dir(form.name);
        console.dir(form.gender);
        console.dir(form.name.value);
        console.dir(form.gender.value);

        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Get 요청 보내기
        $.ajax({
          type: 'get', // 요청의 종류(= form의 method 속성)
          url: '/ajax', // 요청의 경로 (= form 의 action 속성)
          data: data, // 요청에 실어보낼 데이터 ( 서버가 받게 될 데이터)
          success: function (data) {
            //요청이 성공적으로 수행되었을 때 실행할 함수
            console.log(data);
            result.textContent = `Get /ajax ${data.name}, ${data.gender}`;
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출~!');
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: function (data) {
            console.log(data);

            result.textContent = `POST /ajax 요청 완료!! ${data.name}님은 ${data.gender} 이시죠?ㅎㅎ`;
          },
        });
      }

      function axiosGet() {
        console.log('axiosGet 함수 호출');
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // axios 요청의 결과는 Promise 객체에 해당하여, .then, .catch 메서드로 체이닝이 가능~!
        // async, await도 사용가능하다
        axios({
          method: 'get', //요청 방식( = form method 속성)
          url: '/axios', //요청 경로 ( = form action 속성)
          params: data, // 요청에 실어보낼 데이터(query string)
          // params key를 사용하지 않고 query string을 직접 정의해서 요청을 보낼 수도 있다.(위와 동일한 코드)
          // url: `/axios?name=${form.name.value}$gender=${form.gender.value}`
        });

        //       .then(function (response) {
        //         console.log(response); // 서버의 응답 결과
        //         console.log(response.data); // 서버의 응답 데이터를 확인

        //         // 퀴즈. 객체구조 분해 이용!!
        //         const { name, gender } = data;
        //         const result = document.querySelector('.result');

        //         result.textContent = `Get /axios 요청 완료!! ${name}님은 ${gender} 이시죠`;
        //       })
        //       .catch(function (error) {
        //         console.log('Error!', error);
        //       });

        // 퀴즈. axios 요청처리 async/await 로 변경
        // 리더님 풀이 : async를 한단계 위로 처리하심.

        async function ax() {
          try {
            await axios;
            result.textContent = `Get /axios 요청 완료!! ${form.name.value}님은 ${form.gender.value} 이시죠`;
          } catch {
            alert(new Error('에러에요'));
          }
        }

        ax();
      }

      async function axiosPost() {
        console.log('axiosPost 함수 호출');
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          await axios({
            method: 'post',
            url: '/axios',
            data: data,
          });

          result.textContent = `post /axios 요청 완료!! ${form.name.value}님은 ${form.gender.value} 이시죠`;
        } catch {
          alert(new Error('에러에요'));
        }
      }

      // .then((response) => {
      //   console.log(response);
      //   const { name, gender } = response.data;
      //   result.textContent = `post /axios 요청완`;
      // })
      // .catch(error) => {
      //     console.log(new Error('error'))
      // }

      function fetchGet() {
        console.log('fetchGet 함수 호출');
        const form = document.forms['register'];
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`) //fetch 는 default 로 get 방식으로 작동하므로 option 생략 가능!!!
          .then(function (response) {
            console.log(response);
            return response.json();
            // JSON 형태로 응답 데이터를 전달받음. 응답(res) 객체는 json() 메서드를 제공
            // 응답(res)객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체(js obj) 로 반환.
            // 즉, axios랑은 달리, return값을 지정(js 객체로의 반환)해줘야 한다.
          })
          .then(function (data) {
            console.log(data);
            result.textContent = `GET /fetch 요청 완`;
          });
      }

      function fetchPost() {
        console.log('fetchGet 함수 호출');

        // fetch이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!!
        // 1. method 키 post 지정
        // 2. headers키 JSON 포맷 사용 선언
        // 3.body 키 서버로 보낼 데이터
        fetch('/fetch', {
          method: 'POST',
          header: { 'content-Type': 'application / json' },
          body: JSON.stringify(data),
          //   data: js obs
          // JSON.stringify(data): js obj -> json
        })
          .then((response) => {
            console.log(response);
            return response.json();
          })
          .then((response) => {
            console.log(data);
            result.textContent = `POST /fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          });
      }
    </script>
  </body>
</html>
